// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	ads "ads/internal/ads"

	mock "github.com/stretchr/testify/mock"
)

// RepositryAd is an autogenerated mock type for the RepositryAd type
type RepositryAd struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, ad
func (_m *RepositryAd) Add(ctx context.Context, ad *ads.Ad) (int64, error) {
	ret := _m.Called(ctx, ad)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ads.Ad) (int64, error)); ok {
		return rf(ctx, ad)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ads.Ad) int64); ok {
		r0 = rf(ctx, ad)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ads.Ad) error); ok {
		r1 = rf(ctx, ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeStatus provides a mock function with given fields: ctx, adID, published, authorID
func (_m *RepositryAd) ChangeStatus(ctx context.Context, adID int64, published bool, authorID int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, adID, published, authorID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, int64) (*ads.Ad, error)); ok {
		return rf(ctx, adID, published, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, int64) *ads.Ad); ok {
		r0 = rf(ctx, adID, published, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool, int64) error); ok {
		r1 = rf(ctx, adID, published, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: ctx, authorID, adId
func (_m *RepositryAd) DeleteAd(ctx context.Context, authorID int64, adId int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, authorID, adId)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*ads.Ad, error)); ok {
		return rf(ctx, authorID, adId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *ads.Ad); ok {
		r0 = rf(ctx, authorID, adId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, authorID, adId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAd provides a mock function with given fields: ctx, adID
func (_m *RepositryAd) GetAd(ctx context.Context, adID int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, adID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*ads.Ad, error)); ok {
		return rf(ctx, adID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *ads.Ad); ok {
		r0 = rf(ctx, adID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, adID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAds provides a mock function with given fields: ctx
func (_m *RepositryAd) ListAds(ctx context.Context) ([]*ads.Ad, error) {
	ret := _m.Called(ctx)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ads.Ad, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ads.Ad); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAdsAuthor provides a mock function with given fields: ctx, author
func (_m *RepositryAd) ListAdsAuthor(ctx context.Context, author int64) ([]*ads.Ad, error) {
	ret := _m.Called(ctx, author)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*ads.Ad, error)); ok {
		return rf(ctx, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*ads.Ad); ok {
		r0 = rf(ctx, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAdsDate provides a mock function with given fields: ctx, day
func (_m *RepositryAd) ListAdsDate(ctx context.Context, day int64) ([]*ads.Ad, error) {
	ret := _m.Called(ctx, day)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*ads.Ad, error)); ok {
		return rf(ctx, day)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*ads.Ad); ok {
		r0 = rf(ctx, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, title
func (_m *RepositryAd) Search(ctx context.Context, title string) ([]*ads.Ad, error) {
	ret := _m.Called(ctx, title)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*ads.Ad, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ads.Ad); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, authorID, title, text, adID
func (_m *RepositryAd) Update(ctx context.Context, authorID int64, title string, text string, adID int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, authorID, title, text, adID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, int64) (*ads.Ad, error)); ok {
		return rf(ctx, authorID, title, text, adID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, int64) *ads.Ad); ok {
		r0 = rf(ctx, authorID, title, text, adID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string, int64) error); ok {
		r1 = rf(ctx, authorID, title, text, adID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositryAd interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositryAd creates a new instance of RepositryAd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositryAd(t mockConstructorTestingTNewRepositryAd) *RepositryAd {
	mock := &RepositryAd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
