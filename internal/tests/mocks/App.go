// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ads "ads/internal/ads"

	context "context"

	mock "github.com/stretchr/testify/mock"

	user "ads/internal/user"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// ChangeAdStatus provides a mock function with given fields: ctx, adID, published, authorID
func (_m *App) ChangeAdStatus(ctx context.Context, adID int64, published bool, authorID int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, adID, published, authorID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, int64) (*ads.Ad, error)); ok {
		return rf(ctx, adID, published, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, int64) *ads.Ad); ok {
		r0 = rf(ctx, adID, published, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool, int64) error); ok {
		r1 = rf(ctx, adID, published, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUser provides a mock function with given fields: ctx, userID
func (_m *App) CheckUser(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUserDb provides a mock function with given fields: id
func (_m *App) CheckUserDb(id int) (*user.UserDb, error) {
	ret := _m.Called(id)

	var r0 *user.UserDb
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*user.UserDb, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *user.UserDb); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserDb)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAd provides a mock function with given fields: ctx, title, text, authorID
func (_m *App) CreateAd(ctx context.Context, title string, text string, authorID int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, title, text, authorID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) (*ads.Ad, error)); ok {
		return rf(ctx, title, text, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *ads.Ad); ok {
		r0 = rf(ctx, title, text, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(ctx, title, text, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, nickname, email
func (_m *App) CreateUser(ctx context.Context, nickname string, email string) (*user.User, error) {
	ret := _m.Called(ctx, nickname, email)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*user.User, error)); ok {
		return rf(ctx, nickname, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *user.User); ok {
		r0 = rf(ctx, nickname, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserDb provides a mock function with given fields: _a0
func (_m *App) CreateUserDb(_a0 user.UserDb) (*user.UserDb, error) {
	ret := _m.Called(_a0)

	var r0 *user.UserDb
	var r1 error
	if rf, ok := ret.Get(0).(func(user.UserDb) (*user.UserDb, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.UserDb) *user.UserDb); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserDb)
		}
	}

	if rf, ok := ret.Get(1).(func(user.UserDb) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: ctx, authorID, adID
func (_m *App) DeleteAd(ctx context.Context, authorID int64, adID int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, authorID, adID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*ads.Ad, error)); ok {
		return rf(ctx, authorID, adID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *ads.Ad); ok {
		r0 = rf(ctx, authorID, adID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, authorID, adID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *App) DeleteUser(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserDb provides a mock function with given fields: id
func (_m *App) DeleteUserDb(id int) (*user.UserDb, error) {
	ret := _m.Called(id)

	var r0 *user.UserDb
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*user.UserDb, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *user.UserDb); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserDb)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAd provides a mock function with given fields: ctx, adID
func (_m *App) GetAd(ctx context.Context, adID int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, adID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*ads.Ad, error)); ok {
		return rf(ctx, adID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *ads.Ad); ok {
		r0 = rf(ctx, adID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, adID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *App) GetUser(ctx context.Context, userID int64) (*user.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*user.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *user.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDb provides a mock function with given fields: username, password
func (_m *App) GetUserDb(username string, password string) (*user.UserDb, error) {
	ret := _m.Called(username, password)

	var r0 *user.UserDb
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*user.UserDb, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *user.UserDb); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserDb)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAds provides a mock function with given fields: ctx
func (_m *App) ListAds(ctx context.Context) ([]*ads.Ad, error) {
	ret := _m.Called(ctx)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ads.Ad, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ads.Ad); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAdsAuthor provides a mock function with given fields: ctx, author
func (_m *App) ListAdsAuthor(ctx context.Context, author int64) ([]*ads.Ad, error) {
	ret := _m.Called(ctx, author)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*ads.Ad, error)); ok {
		return rf(ctx, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*ads.Ad); ok {
		r0 = rf(ctx, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAdsDate provides a mock function with given fields: ctx, day
func (_m *App) ListAdsDate(ctx context.Context, day int64) ([]*ads.Ad, error) {
	ret := _m.Called(ctx, day)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*ads.Ad, error)); ok {
		return rf(ctx, day)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*ads.Ad); ok {
		r0 = rf(ctx, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAdByName provides a mock function with given fields: ctx, title
func (_m *App) SearchAdByName(ctx context.Context, title string) ([]*ads.Ad, error) {
	ret := _m.Called(ctx, title)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*ads.Ad, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ads.Ad); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAd provides a mock function with given fields: ctx, authorID, title, text, adID
func (_m *App) UpdateAd(ctx context.Context, authorID int64, title string, text string, adID int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, authorID, title, text, adID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, int64) (*ads.Ad, error)); ok {
		return rf(ctx, authorID, title, text, adID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, int64) *ads.Ad); ok {
		r0 = rf(ctx, authorID, title, text, adID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string, int64) error); ok {
		r1 = rf(ctx, authorID, title, text, adID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, nickname, email, userID, activate
func (_m *App) UpdateUser(ctx context.Context, nickname string, email string, userID int64, activate bool) (*user.User, error) {
	ret := _m.Called(ctx, nickname, email, userID, activate)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, bool) (*user.User, error)); ok {
		return rf(ctx, nickname, email, userID, activate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, bool) *user.User); ok {
		r0 = rf(ctx, nickname, email, userID, activate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, bool) error); ok {
		r1 = rf(ctx, nickname, email, userID, activate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserDb provides a mock function with given fields: username, id
func (_m *App) UpdateUserDb(username string, id int) (*user.UserDb, error) {
	ret := _m.Called(username, id)

	var r0 *user.UserDb
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (*user.UserDb, error)); ok {
		return rf(username, id)
	}
	if rf, ok := ret.Get(0).(func(string, int) *user.UserDb); ok {
		r0 = rf(username, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserDb)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(username, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApp(t mockConstructorTestingTNewApp) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
